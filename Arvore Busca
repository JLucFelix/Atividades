#include <stdio.h>
#include <stdlib.h>

typedef struct No {
	int conteudo;
	struct No* esq;
	struct No* dir;
} No;

// Função para criar um novo nó
No* criarNo(int valor) {
	No* novo_no = (No*)malloc(sizeof(No));
	novo_no->conteudo = valor;
	novo_no->esq = NULL;
	novo_no->dir = NULL;
	return novo_no;
}

// Função para inserir um valor na árvore binária de busca
No* inserir(No* raiz, int valor) {
	if (raiz == NULL) {
		return criarNo(valor);
	}
	if (valor < raiz->conteudo) {
		raiz->esq = inserir(raiz->esq, valor);
	} else if (valor > raiz->conteudo) {
		raiz->dir = inserir(raiz->dir, valor);
	}
	return raiz;
}

// Funções de travessia da árvore
void preOrdem(No* raiz) {
	if (raiz != NULL) {
		printf("%d ", raiz->conteudo);
		preOrdem(raiz->esq);
		preOrdem(raiz->dir);
	}
}

void posOrdem(No* raiz) {
	if (raiz != NULL) {
		posOrdem(raiz->esq);
		posOrdem(raiz->dir);
		printf("%d ", raiz->conteudo);
	}
}

void inOrdem(No* raiz) {
	if (raiz != NULL) {
		inOrdem(raiz->esq);
		printf("%d ", raiz->conteudo);
		inOrdem(raiz->dir);
	}
}

int main() {
	No* Raiz = NULL;
	int valor;

	// Inserir 10 valores na árvore
	printf("Digite 10 valores para a árvore de busca:\n");
	for (int i = 0; i < 10; i++) {
		printf("Digite o valor %d: ", i + 1);
		scanf("%d", &valor);
		Raiz = inserir(Raiz, valor);
	}

	printf("\nExibindo em Pre-Ordem: ");
	preOrdem(Raiz);

	printf("\nExibindo em In-Ordem: ");
	inOrdem(Raiz);

	printf("\nExibindo em Pos-Ordem: ");
	posOrdem(Raiz);

	return 0;
}
